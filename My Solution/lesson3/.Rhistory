zoo_animals = [c("tiger", "sloth", "lion", "eagle")]
print(zoo_animals)
zoo_animals[1] = "dog"
print(zoo_animals)
zoo_animals = c("tiger", "sloth", "lion", "eagle")
print(zoo_animals)
zoo_animals[1] = "dog"
print(zoo_animals)
v1 <- c(3, 8, 4, 5, 0, 11)
v2 <- c(4, 11, 0, 8, 1, 2)
v3 <- v1 + v2
print(v3)
v1 <- c(3, 8, 4, 5, 0, 11)
v2 <- c(4, 11, 0, 8, 1, 2)
v3 <- v1 - v2
print(v3)
v1 <- c(3, 8, 4, 5, 0, 11)
v2 <- c(4, 11, 0, 8, 1, 2)
v3 <- v1 * v2
print(v3)
v1 <- c(3, 8, 4, 5, 0, 11)
v2 <- c(4, 11, 0, 8, 1, 2)
v3 <- v1 / v2
print(v3)
v1 <- c(3, 8, 4, 5, 0, 11)
v2 <- c(4, 11, 0, 8, 1, 2)
v3 <- v1 / v2
print(v3)
v1 <- c(1, 2, 3, 4)
v2 <- c(4, 11, 0, 8, 1, 2)
v3 <- v1 * v2
print(v3)
v <- c(3,8,4,5,0,11, -9, 304)
v1 <- sort(v)
print(sort.result)
v2 <- sort(v, decreasing = TRUE)
print(revsort.result)
v <- c(3,8,4,5,0,11, -9, 304)
v1 <- sort(v)
print(v1)
v2 <- sort(v, decreasing = TRUE)
print(v2)
v <- c(3,8,4,5,0,11, -9, 304)
# Sort the elements of the vector.
v1 <- sort(v)
print(v1)
# Sort the elements in the reverse order.
v2 <- sort(v, decreasing = TRUE)
print(v2)
v <- c("Red","Blue","yellow","violet")
# Sorting character vectors.
v1 <- sort(v)
print(v1)
# Sorting character vectors in reverse order.
v2 <- sort(v, decreasing = TRUE)
print(v2)
v <- c(TRUE,FALSE,TRUE,FALSE)
# Sorting character vectors.
v1 <- sort(v)
print(v1)
v <- c(TRUE,FALSE,TRUE,FALSE)
# Sorting logical vectors.
v1 <- sort(v)
print(v1)
list_data <- list("Red", "Green", c(21,32,11), TRUE, 51.23, 119.1)
print(list_data)
list_data <- list("Red", "Green", c(21,32,11), TRUE, 51.23, 119.1)
print(list_data[1])
list_data <- list(c("Jan","Feb","Mar"), (2:6), list("green",12.3))
# Give names to the elements in the list.
names(list_data) <- c("Months", "Numbers", "An Inner list")
print(list_data)
list_data <- list(c("Jan","Feb","Mar"), 2:6, list("green",12.3))
# Give names to the elements in the list.
names(list_data) <- c("Months", "Numbers", "An Inner list")
print(list_data)
print(list_data$Numbers)
print(list_data$Months)
test_list <- list("angel", 3, TRUE)
test_list[1] = "Devil"
print(test_list)
test_list <- list("angel", 3, TRUE)
test_list[4] <- "new_element"
print(test_list[])
test_list <- list("angel", 3, TRUE)
test_list[3] <- NULL
test_list[2] <- NULL
print(test_list)
list1 <- list(1,2,3)
list2 <- list("Sun","Mon","Tue")
# Merge the two lists.
list3 <- c(list1,list2)
print(list3)
list1 <- list(1,2,3)
list2 <- list("Sun","Mon","Tue")
# Merge the two lists.
list3 <- list1 + list2
print(list3)
list1 <- list(1,2,3)
list2 <- list("Sun","Mon","Tue")
# Merge the two lists.
list3 <- list1 + list2
print(list3)
list1 <- list(1:5)
list2 <-list(10:14)
# Convert the lists to vectors.
v1 <- unlist(list1)
v2 <- unlist(list2)
# Now add the vectors
result <- v1+v2
print(result)
M <- matrix(c(3:14), nrow=4, byrow=TRUE)
print(M)
M <- matrix(c(3:14), nrow=4, byrow=FALSE)
print(M)
# Define the column and row names.
rownames = c("row1", "row2", "row3", "row4")
colnames = c("col1", "col2", "col3")
M <- matrix(c(3:14), nrow=4, byrow=TRUE, dimnames=list(rownames, colnames))
print(M)
M <- matrix(c(3:14), nrow=4, byrow=TRUE)
# Access the element at 3rd column and 1st row.
print(P[1,3])
# Access only the 2nd row.
print(P[2,])
# Access only the 3rd column.
print(P[,3])
M <- matrix(c(3:14), nrow=4, byrow=TRUE)
# Access the element at 3rd column and 1st row.
print(M[1,3])
# Access only the 2nd row.
print(M[2,])
# Access only the 3rd column.
print(M[,3])
M <- matrix(c(3:14), nrow=4, byrow=TRUE)
# moidfy the item.
M[1,3] = 333
print(M)
M <- matrix(c(3:14), nrow=4, byrow=TRUE)
N <- matrix(c(10:21), nrow=4, byrow=TRUE)
result <- M + N
print("Result of addition\n")
print(result)
result <- M - N
print("Result of subtracting\n")
print(result)
M <- matrix(c(3:14), nrow=4, byrow=TRUE)
N <- matrix(c(10:21), nrow=4, byrow=TRUE)
result <- M + N
print("Result of addition\n")
print(result)
result <- M - N
print("Result of subtracting\n")
print(result)
result <- M * N
print("Result of multiplication\n")
print(result)
result <- M / N
print("Result of division\n")
print(result)
# Create two vectors of different lengths.
vec <- 1:18
# Take these vectors as input to the array.
result <- array(vec,dim=c(3,3,2))
print(result)
# Create two vectors of different lengths.
vec <- 1:18
colnames <- c("COL1","COL2","COL3")
rownames <- c("ROW1","ROW2","ROW3")
matrixnames <- c("Matrix1","Matrix2")
# Take these vectors as input to the array.
result <- array(vec,dim=c(3,3,2),dimnames = list(colnames,rownames,matrixnames))
print(result)
# Create two vectors of different lengths.
vec <- 1:18
result <- array(vec,dim=c(3,3,2))
# Print the element in the 1st row and 3rd column of the 1st matrix.
print(result[1,3,1])
# Print the third row of the second matrix of the array.
print(result[3,,2])
# Print the 2nd Matrix.
print(result[,,2])
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
arr[3,1,1] = 333
print (arr[,,1])
# Create two vectors of different lengths.
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
arr[3,1,1] = "yikes"
print (arr[,,1])
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
result <- apply(arr, c(1), sum)
print (result)
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
result <- apply(arr, c(1,3), sum)
print (result)
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
result <- apply(arr, c(1,3,1), sum)
print (result)
?apply
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
result <- apply(arr, 1, sum)
print (result)
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
result <- apply(arr, 2, sum)
print (result)
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
result <- apply(arr, 3, sum)
print (result)
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
result <- apply(arr, 4, sum)
print (result)
vec = 1:18
arr <- array(vec,dim=c(3,3,2))
result <- apply(arr, 4, sum)
print (result)
vec = 1:18
arr <- array(vec,dim=c(3,3,2))
print (arr)
# Assignment using equal operator.
var1 = c(0,1,2,3)
print (var1)
# Assignment using leftward operator.
var2 <- c("learn","R")
print (var2)
# Assignment using rightward operator.
c(TRUE,1) -> var3
print (var3)
# Assignment using equal operator.
var1 = c(0,1,2,3)
print (var1)
# Assignment using leftward operator.
var2 <- c("learn","R")
print (var2)
# Assignment using rightward operator.
c(TRUE,FALSE) -> var3
print (var3)
var_x <- "Hello"
print(class(var_x))
var_x <- 34.5
print(class(var_x))
var_x <- 27L
print(class(var_x))
var1 <- "Hello"
var2 <- 34.5
rm(var2)
print(var1)
print(var2)
v1 <- c(3, 8, 4, 5, 0, 11)
v2 <- c(4, 11, 0, 8, 1, 2)
v3 <- v1 %% v2
print(v3)
v1 <- c(3, 8, 4, 5, 0, 11)
v2 <- c(4, 11, 0, 8, 1, 2)
v3 <- v1 % v2
print(v3)
v1 = c(3, 8, 4, 5, 0, 11)
v2 = c(4, 11, 0, 8, 1, 2)
v3 = v1 % v2
print(v3)
v1 = c(3, 8, 4, 5, 0, 11)
v2 = c(4, 11, 0, 8, 1, 2)
v3 = v1 ^ v2
print(v3)
M <- matrix(c(3:14), nrow=4, byrow=TRUE)
print (t(M))
M <- matrix(c(3:14), nrow=4, byrow=TRUE)
print (M)
print (t(M))
M <- matrix(c(1:6), nrow=3, byrow=TRUE)
N <- matrix(c(7:13), nrow=2, byrow=TRUE)
print (M)
print (N)
M <- matrix(c(1:6), nrow=3, byrow=TRUE)
N <- matrix(c(7:12), nrow=2, byrow=TRUE)
print (M)
print (N)
print (m %*% N)
#create 3x2 matrix
print (M %*% N)
#create 3x2 matrix
M <- matrix(c(1:6), nrow=3, byrow=TRUE)
#create 2x3 matrix
N <- matrix(c(7:12), nrow=2, byrow=TRUE)
print (M)
print (N)
print (M %*% N)
?inverse.rle
#create 3x2 matrix
M <- matrix(c(1:6), nrow=3, byrow=TRUE)
#create 2x3 matrix
N <- M ^-1
print (M)
print (N)
x = "Lana"
y = "anwar"
print (x,y)
print (x)
x = "Lana"
y = "anwar"
print (x, y)
x = "Lana"
y = "anwar"
cat (x, y)
x = "Lana"
y = "anwar"
//hello
cat (x, y)
switch(expression, case1, case2, case3....)
x <- switch(
3,
"first",
"second",
"third",
"fourth"
)
print(x)
x <- switch(
3,
"first",
"second",
"third",
"fourth"
)
print(x)
x <- switch( 2,
"first",
"second",
"third",
"fourth"
)
print(x)
counter <- 10
while (counter < 13){
print (counter)
counter += 1
}
counter <- 10
while (counter < 13){
print (counter)
counter =counter + 1
}
v <- LETTERS[1:4]
for ( i in v) {
print(i)
}
i <- 0
repeat{
cat("Hi", i)
i <- i+1
if(cnt > 5){
break
}
}
i <- 0
repeat{
cat("Hi", i)
i <- i+1
if(i > 5){
break
}
}
i <- 0
repeat{
cat("Hi", "\n")
i <- i+1
if(i > 5){
break
}
}
i <- 0
repeat{
cat("Hi", i, "\n")
i <- i+1
if(i > 5){
break
}
}
i <- 0
repeat{
cat("Hi", i, "\n")
i <- i+1
if(i = 3){
next
}
if(i > 5){
break
}
}
i <- 0
repeat{
cat("Hi", i, "\n")
i <- i+1
if(i == 3){
next
}
if(i > 5){
break
}
}
i <- 0
repeat{
if(i == 3){
next
}
else{
cat("Hi", i, "\n")
i <- i+1
}
if(i > 5){
break
}
}
i <- 0
repeat{
if(i == 3){
next
}
cat("Hi", i, "\n")
i <- i+1
if(i > 5){
break
}
}
v <- LETTERS[1:6]
for ( i in v){
if (i == "D"){
next
}
print(i)
}
qplot(data = diamonds, x= price, geom = "boxplot") +
facet_wrap(~cut, ncol=5)
library(ggplot2)
data(diamonds)
qplot(data = diamonds, x= price, geom = "boxplot") +
facet_wrap(~cut, ncol=5)
qplot(data = diamonds, x= color, y = price, geom = "boxplot") +
facet_wrap(~cut, ncol=5)
qplot(data = diamonds, x= color, y = price, geom = "boxplot")
qplot(data = diamonds, x= color, y = price, geom = "boxplot") + \
scale_y_continuous(limits = c(0,8000))
qplot(data = diamonds, x= color, y = price, geom = "boxplot") +
scale_y_continuous(limits = c(0,8000))
qplot(data = diamonds, x= color, y = price, geom = "boxplot") +
coord_cartesian(ylim= c(0, 8000)
qplot(data = diamonds, x= color, y = price, geom = "boxplot") +
coord_cartesian(ylim= c(0, 8000))
qplot(data = diamonds, x= color, y = price, geom = "boxplot") +
coord_cartesian(ylim= c(0, 8000))
by(diamonds$price, diamonds$color, summary)
price_per_carat = diamonds$price/diamonds$carat
qplot(data = diamonds, x= color, y = price_per_carat, geom = "boxplot")
by(diamonds$price, diamonds$color, summary)
price_per_carat = diamonds$price/diamonds$carat
qplot(data = diamonds, x= color, y = price_per_carat, geom = "boxplot") +
coord_cartesian(ylim= c(0, 7000))
by(diamonds$price, diamonds$color, summary)
price_per_carat = diamonds$price/diamonds$carat
qplot(data = diamonds, x= color, y = price_per_carat, geom = "boxplot") +
coord_cartesian(ylim= c(2000, 6000))
by(diamonds$price, diamonds$color, summary)
price_per_carat = diamonds$price/diamonds$carat
qplot(data = diamonds, x= color, y = price_per_carat, geom = "boxplot") +
coord_cartesian(ylim= c(2000, 6000))
by(diamonds$price_per_carat, diamonds$color, summary)
price_per_carat <- factor(price_per_carat)
price_per_carat = diamonds$price/diamonds$carat
price_per_carat <- factor(price_per_carat)
qplot(data = diamonds, x= color, y = price_per_carat, geom = "boxplot") +
coord_cartesian(ylim= c(2000, 6000))
price_per_carat = diamonds$price/diamonds$carat
price_per_carat <- factor(price_per_carat)
qplot(data = diamonds, x= color, y = price_per_carat, geom = "boxplot") +
coord_cartesian(ylim= c(2000, 6000))
price_per_carat = diamonds$price/diamonds$carat
qplot(data = diamonds, x= color, y = price_per_carat, geom = "boxplot") +
coord_cartesian(ylim= c(2000, 6000))
price_per_carat <- factor(price_per_carat)
by(diamonds$price_per_carat, diamonds$color, summary)
length(diamonds$color)
length(diamonds$price_per_carat)
qplot(data = diamonds, x= carat, geom = "freqpoly")
qplot(data = diamonds, x= carat, geom = "freqpoly") +
scale_x_continuous(limits = c(0, 6),
breaks = seq(0, 6, 0.2))
qplot(data = diamonds, x= carat, geom = "freqpoly") +
scale_x_continuous(limits = c(0, 6),
breaks = seq(0, 6, 0.2)) +
scale_y_continuous(breaks = seq(0, 20000, 1000))
qplot(data = diamonds, x= carat, geom = "freqpoly") +
scale_x_continuous(limits = c(0, 6),
breaks = seq(0, 6, 0.1)) +
scale_y_continuous(breaks = seq(0, 20000, 1000))
qplot(data = diamonds, x= carat, geom = "freqpoly") +
scale_x_continuous(limits = c(0, 6),
breaks = seq(0, 6, 0.2)) +
scale_y_continuous(breaks = seq(0, 20000, 1000))
table(diamonds$carat)
getwd()
setwd("D:/Profession/Courses/Data Science/Exploratory Data Analysis/EDA_Course_Materials/lesson3")
average_age_billionair <- read.csv("Indicator_Average age.xlsx")
summary(average_age_billionair)
str(average_age_billionair)
