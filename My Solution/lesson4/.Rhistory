colnames = c("col1", "col2", "col3")
M <- matrix(c(3:14), nrow=4, byrow=TRUE, dimnames=list(rownames, colnames))
print(M)
M <- matrix(c(3:14), nrow=4, byrow=TRUE)
# Access the element at 3rd column and 1st row.
print(P[1,3])
# Access only the 2nd row.
print(P[2,])
# Access only the 3rd column.
print(P[,3])
M <- matrix(c(3:14), nrow=4, byrow=TRUE)
# Access the element at 3rd column and 1st row.
print(M[1,3])
# Access only the 2nd row.
print(M[2,])
# Access only the 3rd column.
print(M[,3])
M <- matrix(c(3:14), nrow=4, byrow=TRUE)
# moidfy the item.
M[1,3] = 333
print(M)
M <- matrix(c(3:14), nrow=4, byrow=TRUE)
N <- matrix(c(10:21), nrow=4, byrow=TRUE)
result <- M + N
print("Result of addition\n")
print(result)
result <- M - N
print("Result of subtracting\n")
print(result)
M <- matrix(c(3:14), nrow=4, byrow=TRUE)
N <- matrix(c(10:21), nrow=4, byrow=TRUE)
result <- M + N
print("Result of addition\n")
print(result)
result <- M - N
print("Result of subtracting\n")
print(result)
result <- M * N
print("Result of multiplication\n")
print(result)
result <- M / N
print("Result of division\n")
print(result)
# Create two vectors of different lengths.
vec <- 1:18
# Take these vectors as input to the array.
result <- array(vec,dim=c(3,3,2))
print(result)
# Create two vectors of different lengths.
vec <- 1:18
colnames <- c("COL1","COL2","COL3")
rownames <- c("ROW1","ROW2","ROW3")
matrixnames <- c("Matrix1","Matrix2")
# Take these vectors as input to the array.
result <- array(vec,dim=c(3,3,2),dimnames = list(colnames,rownames,matrixnames))
print(result)
# Create two vectors of different lengths.
vec <- 1:18
result <- array(vec,dim=c(3,3,2))
# Print the element in the 1st row and 3rd column of the 1st matrix.
print(result[1,3,1])
# Print the third row of the second matrix of the array.
print(result[3,,2])
# Print the 2nd Matrix.
print(result[,,2])
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
arr[3,1,1] = 333
print (arr[,,1])
# Create two vectors of different lengths.
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
arr[3,1,1] = "yikes"
print (arr[,,1])
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
result <- apply(arr, c(1), sum)
print (result)
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
result <- apply(arr, c(1,3), sum)
print (result)
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
result <- apply(arr, c(1,3,1), sum)
print (result)
?apply
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
result <- apply(arr, 1, sum)
print (result)
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
result <- apply(arr, 2, sum)
print (result)
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
result <- apply(arr, 3, sum)
print (result)
vec <- 1:18
arr <- array(vec,dim=c(3,3,2))
result <- apply(arr, 4, sum)
print (result)
vec = 1:18
arr <- array(vec,dim=c(3,3,2))
result <- apply(arr, 4, sum)
print (result)
vec = 1:18
arr <- array(vec,dim=c(3,3,2))
print (arr)
# Assignment using equal operator.
var1 = c(0,1,2,3)
print (var1)
# Assignment using leftward operator.
var2 <- c("learn","R")
print (var2)
# Assignment using rightward operator.
c(TRUE,1) -> var3
print (var3)
# Assignment using equal operator.
var1 = c(0,1,2,3)
print (var1)
# Assignment using leftward operator.
var2 <- c("learn","R")
print (var2)
# Assignment using rightward operator.
c(TRUE,FALSE) -> var3
print (var3)
var_x <- "Hello"
print(class(var_x))
var_x <- 34.5
print(class(var_x))
var_x <- 27L
print(class(var_x))
var1 <- "Hello"
var2 <- 34.5
rm(var2)
print(var1)
print(var2)
v1 <- c(3, 8, 4, 5, 0, 11)
v2 <- c(4, 11, 0, 8, 1, 2)
v3 <- v1 %% v2
print(v3)
v1 <- c(3, 8, 4, 5, 0, 11)
v2 <- c(4, 11, 0, 8, 1, 2)
v3 <- v1 % v2
print(v3)
v1 = c(3, 8, 4, 5, 0, 11)
v2 = c(4, 11, 0, 8, 1, 2)
v3 = v1 % v2
print(v3)
v1 = c(3, 8, 4, 5, 0, 11)
v2 = c(4, 11, 0, 8, 1, 2)
v3 = v1 ^ v2
print(v3)
M <- matrix(c(3:14), nrow=4, byrow=TRUE)
print (t(M))
M <- matrix(c(3:14), nrow=4, byrow=TRUE)
print (M)
print (t(M))
M <- matrix(c(1:6), nrow=3, byrow=TRUE)
N <- matrix(c(7:13), nrow=2, byrow=TRUE)
print (M)
print (N)
M <- matrix(c(1:6), nrow=3, byrow=TRUE)
N <- matrix(c(7:12), nrow=2, byrow=TRUE)
print (M)
print (N)
print (m %*% N)
#create 3x2 matrix
print (M %*% N)
#create 3x2 matrix
M <- matrix(c(1:6), nrow=3, byrow=TRUE)
#create 2x3 matrix
N <- matrix(c(7:12), nrow=2, byrow=TRUE)
print (M)
print (N)
print (M %*% N)
?inverse.rle
#create 3x2 matrix
M <- matrix(c(1:6), nrow=3, byrow=TRUE)
#create 2x3 matrix
N <- M ^-1
print (M)
print (N)
x = "Lana"
y = "anwar"
print (x,y)
print (x)
x = "Lana"
y = "anwar"
print (x, y)
x = "Lana"
y = "anwar"
cat (x, y)
x = "Lana"
y = "anwar"
//hello
cat (x, y)
switch(expression, case1, case2, case3....)
x <- switch(
3,
"first",
"second",
"third",
"fourth"
)
print(x)
x <- switch(
3,
"first",
"second",
"third",
"fourth"
)
print(x)
x <- switch( 2,
"first",
"second",
"third",
"fourth"
)
print(x)
counter <- 10
while (counter < 13){
print (counter)
counter += 1
}
counter <- 10
while (counter < 13){
print (counter)
counter =counter + 1
}
v <- LETTERS[1:4]
for ( i in v) {
print(i)
}
i <- 0
repeat{
cat("Hi", i)
i <- i+1
if(cnt > 5){
break
}
}
i <- 0
repeat{
cat("Hi", i)
i <- i+1
if(i > 5){
break
}
}
i <- 0
repeat{
cat("Hi", "\n")
i <- i+1
if(i > 5){
break
}
}
i <- 0
repeat{
cat("Hi", i, "\n")
i <- i+1
if(i > 5){
break
}
}
i <- 0
repeat{
cat("Hi", i, "\n")
i <- i+1
if(i = 3){
next
}
if(i > 5){
break
}
}
i <- 0
repeat{
cat("Hi", i, "\n")
i <- i+1
if(i == 3){
next
}
if(i > 5){
break
}
}
i <- 0
repeat{
if(i == 3){
next
}
else{
cat("Hi", i, "\n")
i <- i+1
}
if(i > 5){
break
}
}
i <- 0
repeat{
if(i == 3){
next
}
cat("Hi", i, "\n")
i <- i+1
if(i > 5){
break
}
}
v <- LETTERS[1:6]
for ( i in v){
if (i == "D"){
next
}
print(i)
}
getwd()
setwd("D:/Profession/Courses/Data Science/Exploratory Data Analysis/EDA_Course_Materials/lesson4")
library(ggplot2)
facebook <- read.csv("pseudo_facebook.tsv", sep='\t')
qplot(data = facebook, x= age, y= friend_count)
names(facebook)
ggplot(data = facebook, aes(x = age, y = friend_count)) +
geom_point(alpha = 1/20) +
scale_x_discrete(limits = c(13, 90))
#alpha is used to set the transparency, so if alpha = 1/20 this means that
#it takes 20 point to be located in the same place to get one black dot.
library(dplyr)
#let's group the whole facebook dataset's age.
#group_by() funcion take two arguments, the whole dataset and what you want to group
age_group = group_by(facebook, age)
#let's make some mathematical operation with age_group like determining mean and median
#the mean is going to be calculated and put in 'friend_count_mean' vector
#the median is going to be calculated and put in 'friend_count_median' vector
#summarise() used to create a table
#n() function is used to get the number of people in each group, and it's used only with summarise()
friend_count_by_age = summarise(age_group,
friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
nummber_of_people = n())
head(friend_count_by_age, 20)
#which gives the first 20 row from the table
ggplot(data = friend_count_by_age,
aes(x = age, y = friend_count_mean)) +
geom_line()
p <- ggplot(data = facebook, aes(x= age, y = friend_count)) +
geom_point(alpha = 1/20, color = "#EFE4B0") +
coord_cartesian(xlim= c(13, 75), ylim = c(0, 1000))
p
#here, we are going to plot the scatter plot of friend count over the whole facebook dataset
# and overlay the graph line of mean
#we are going to choose a brighter color to be able to draw the graph line above it
p <- ggplot(data = facebook, aes(x= age, y = friend_count)) +
geom_point(alpha = 1/20, color = "#EFE4B0") +
coord_cartesian(xlim= c(13, 75), ylim = c(0, 1000))
#add a graph line which represents the mean of the whole graph.
p <- p + geom_line(stat = "summary", fun.y = mean)
#add another graph line which represents the 10% quantile (first 10% of whole dataset friend_count).
# linetype to make the line dashed
p <- p + geom_line(stat="summary", fun.y = quantile, fun.args=list(probs=0.1), color = "#0C00EF", linetype = 2)
#add another graph line which represents the 90% quantile.
p <- p + geom_line(stat="summary", fun.y = quantile, fun.args=list(probs=0.9), color = "#0C00EF", linetype = 2)
#add another graph line which represents the median (50%).
p <- p + geom_line(stat="summary", fun.y = quantile, fun.args=list(probs=0.5), color = "#EF0014")
p
#here, we are going to get correlation between 'age' and 'friend_count' in 'facebook' dataset
#we can get the correlation using cor.test() function
cor.test(facebook$age, facebook$friend_count,
method = c("pearson"),
alternative= C("two_sided")
)
#here, we are going to get correlation between 'age' and 'friend_count' in 'facebook' dataset
#we can get the correlation using cor.test() function
cor.test(facebook$age, facebook$friend_count)
#here, we are going to get correlation between 'age' and 'friend_count' in 'facebook' dataset
#we can get the correlation using cor.test() function
cor.test(facebook$age, facebook$friend_count,
method = c("pearson"))
#here, we are going to do the same but with using with() function
with(facebook, cor.test(age, friend_count, method="pearson"))
#with() function is pretty awesome with subsetting.
#let's use the correlation with datasets above 70 years old
with(subset(facebook, age>70, cor.test(age, friend_count, method="pearson"))
#with() function is pretty awesome with subsetting.
#let's use the correlation with datasets above 70 years old
with(subset(facebook, age>70), cor.test(age, friend_count, method="pearson"))
#with() function is pretty awesome with subsetting.
#let's use the correlation with datasets below 70 years old
with(subset(facebook, age<70), cor.test(age, friend_count, method="pearson"))
#with() function is pretty awesome with subsetting.
#let's use the correlation with datasets below 70 years old
with(subset(facebook, age<=70), cor.test(age, friend_count, method="pearson"))
ggplot(data = facebook, aes(x= age, y = friend_count)) +
geom_point( color = "#EFE4B0")
names(facebook)
ggplot(data = facebook, aes(x= likes_received, y = www_likes_received)) +
geom_point( color = "#EFE4B0")
ggplot(data = facebook, aes(x= likes_received, y = www_likes_received)) +
geom_point()
ggplot(data = facebook, aes(x= likes_received, y = www_likes_received)) +
geom_point() +
xlim(0, quantile(facebook$likes_received, 0.95)) +
ylim(0, quantile(facebook$likes_received, 0.95))
#here, we are going to plot the 95% from the previous data.
#we can do that using quantile() function
p <- ggplot(data = facebook, aes(x= likes_received, y = www_likes_received)) +
geom_point() +
xlim(0, quantile(facebook$likes_received, 0.95)) +
ylim(0, quantile(facebook$likes_received, 0.95))
p
#here, we are going to add the 'correlation line' which is the best line that fits through
#these datasets. We can do that by adding a smoother like so
p<- p = geom_smooth(method='lm', color= '#E70C00')
p
#here, we are going to add the 'correlation line' which is the best line that fits through
#these datasets. We can do that by adding a smoother like so
p<- p + geom_smooth(method='lm', color= '#E70C00')
p
#here, we are going to plot the 95% from the previous data.
#we can do that using quantile() function
p <- ggplot(data = facebook, aes(x= likes_received, y = www_likes_received)) +
geom_point() +
xlim(0, quantile(facebook$likes_received, 0.95)) +
ylim(0, quantile(facebook$www_likes_received, 0.95))
p
#here, we are going to add the 'correlation line' which is the best line that fits through
#these datasets. We can do that by adding a smoother like so
p<- p + geom_smooth(method='lm', color= '#E70C00')
p
#'lm' means 'linear model' which represents 'linear relation'
ggplot(data=facebook, aes(x= likes_received, y= www_likes_received) +
geom_point() +
xlim(quantile(facebook$likes_received, 95), quantile(facebook$likes_received, 100)) +
ylim(quantile(facebook$www_likes_received, 95), quantile(facebook$www_likes_received, 100))       )
ggplot(data=facebook, aes(x= likes_received, y= www_likes_received) +
geom_point() +
xlim(quantile(facebook$likes_received, 0.95), quantile(facebook$likes_received, 1)) +
ylim(quantile(facebook$www_likes_received, 0.95), quantile(facebook$www_likes_received, 1))       )
ggplot(data=facebook, aes(x= likes_received, y= www_likes_received)) +
geom_point() +
xlim(quantile(facebook$likes_received, 0.95), quantile(facebook$likes_received, 1)) +
ylim(quantile(facebook$www_likes_received, 0.95), quantile(facebook$www_likes_received, 1))
cor.test(facebook$likes_received, facebook$www_likes_received)
install.packages('alr3')
library(alr3)
?Mitchell
mitchel = data("Mitchell")
names(mitchel)
names(Mitchel)
head(Mitchell)
ggplot(data= Mitchell, aes(x= Temp, y=Month)) +
goem_point()
ggplot(data= Mitchell, aes(x= Temp, y= Month)) +
goem_point()
library(ggplot2)
ggplot(data= Mitchell, aes(x= Temp, y= Month)) +
goem_point()
ggplot(data= Mitchell, aes(x= Temp, y= Month)) +
geom_point()
cor.test(Mitchell$Temp, Mitchell$Month, method="pearson")
cor.test(Mitchell$Temp, Mitchell$Month, method="pearson")
cor.test(Mitchell$Month, Mitchell$Temp, method="pearson")
#we are going to break the month parameter into a year
cor.test(Mitchell$Month, Mitchell$Temp, method="pearson") +
scale_x_discrete(breaks= seq(0, 1, 16.7))
#we are going to break the month parameter into a year
ggplot(data= Mitchell, aes(x= Month, y= Temp)) +
geom_point() +
scale_x_discrete(breaks= seq(0, 1, 16.7))
#we are going to break the month parameter into a year
ggplot(data= Mitchell, aes(x= Month, y= Temp)) +
geom_point() +
scale_x_discrete(limits = (1, 16.7), breaks= seq(0, 1, 16.7))
#we are going to break the month parameter into a year
ggplot(data= Mitchell, aes(x= Month, y= Temp)) +
geom_point() +
scale_x_discrete(limits = (1:16.7), breaks= seq(0, 1, 16.7))
#we are going to break the month parameter into a year
ggplot(data= Mitchell, aes(x= Month, y= Temp)) +
geom_point() +
scale_x_discrete(limits= c(11, 16.7), breaks= seq(0, 1, 16.7))
#we are going to break the month parameter into a year
ggplot(data= Mitchell, aes(x= Month, y= Temp)) +
geom_point() +
scale_x_discrete( breaks= seq(0, 1, 16.7))
#we are going to break the month parameter into a year
ggplot(data= Mitchell, aes(x= Month, y= Temp)) +
geom_point() +
scale_x_discrete( breaks= seq(0, 1, 16.7)
#we are going to break the month parameter into a year
ggplot(data= Mitchell, aes(x= Month, y= Temp)) +
geom_point() +
scale_x_discrete( breaks= seq(0, 1, 16.7))
#we are going to break the month parameter into a year
ggplot(data= Mitchell, aes(x= Month, y= Temp)) +
geom_point() +
scale_x_discrete(limits= c(1, 16.7), breaks= seq(0, 1, 16.7))
#we are going to break the month parameter into a year
ggplot(data= Mitchell, aes(x= Month, y= Temp)) +
geom_point() +
scale_x_discrete(limits= c(0, 200), breaks= seq(0, 12, 200))
head(Mitchell)
#we are going to break the month parameter into a year
ggplot(data= Mitchell, aes(x= Month, y= Temp)) +
geom_point() +
scale_x_discrete(breaks= seq(0, 203, 12))
